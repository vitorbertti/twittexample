{"version":3,"sources":["logo.svg","tweets/components.js","lookup/components.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TweetsComponent","props","textAreaRef","React","createRef","useState","newTweets","setNewTweets","className","onSubmit","e","preventDefault","newValue","current","value","tempNewTweets","unshift","content","likes","id","ref","required","name","type","TweetsList","tweetsInit","setTweetsInit","tweets","setTweets","useEffect","final","concat","length","callback","xhr","XMLHttpRequest","responseType","open","process","onload","response","status","onerror","send","loadTweets","alert","map","item","index","Tweet","tweet","key","ActionBtn","action","setLikes","userLike","setUserLike","actionDisplay","display","onClick","App","src","logo","alt","href","target","rel","Boolean","window","location","hostname","match","appEl","document","getElementById","ReactDOM","render","tweetsEl","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.dd3fd326.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useEffect, useState } from 'react'\r\n\r\nimport { loadTweets } from '../lookup'\r\n\r\nexport function TweetsComponent(props) {\r\n   const textAreaRef = React.createRef();\r\n   const [newTweets, setNewTweets] = useState([]);\r\n\r\n   const handleSubmit = (e) => {\r\n      e.preventDefault();\r\n      const newValue = textAreaRef.current.value;\r\n      const tempNewTweets = [...newTweets];\r\n      tempNewTweets.unshift({\r\n         content: newValue,\r\n         likes: 0,\r\n         id: 123123\r\n      });\r\n      setNewTweets(tempNewTweets);\r\n      textAreaRef.current.value = '';   \r\n   }\r\n\r\n   return (\r\n      <div className={props.className}>\r\n         <div className='col-12 mb-3'>\r\n            <form onSubmit={handleSubmit}>\r\n               <textarea ref={textAreaRef} required={true} className='form-control' name='tweet'></textarea>\r\n               <button type='submit' className='btn btn-primary my-3'>Tweet</button>\r\n            </form>\r\n         </div>\r\n         <TweetsList newTweets={newTweets}/>\r\n      </div>\r\n   );\r\n}\r\n\r\nexport function TweetsList(props) {\r\n   const [tweetsInit, setTweetsInit] = useState([]);\r\n   const [tweets, setTweets] = useState([]);\r\n   useEffect(() => {\r\n      const final = [...props.newTweets].concat(tweetsInit);\r\n      if(final.length !== tweets.length) {\r\n         setTweets(final);\r\n      }\r\n   }, [props.newTweets, tweets, tweetsInit]);\r\n\r\n   useEffect(() => {\r\n     const myCallback = (response, status) => {\r\n       if(status === 200) {\r\n         setTweetsInit(response);\r\n       }else {\r\n         alert('There was an error.');\r\n       }\r\n     };\r\n     loadTweets(myCallback);\r\n   }, [tweetsInit]);\r\n \r\n   return tweets.map((item, index) => {\r\n     return <Tweet tweet={item} key={`${index}-{item.id}`} className='my-5 py-5 border bg-white text-dark'/>\r\n   })\r\n }\r\n\r\nexport function ActionBtn(props) {\r\n   const { tweet, action } = props;\r\n   const [likes, setLikes] = useState(tweet.likes ? tweet.likes : 0);\r\n   const [userLike, setUserLike] = useState(tweet.userLike ? true : false);\r\n   const className = props.className ? props.className : 'btn btn-primary btn-sm';\r\n   const actionDisplay = action.display ? action.display : 'Action';\r\n   const handleClick = (e) => {\r\n      e.preventDefault();\r\n      if(action.type === 'like') {\r\n         if(userLike === true){\r\n            setLikes(likes - 1);\r\n            setUserLike(false);\r\n         }else {\r\n            setLikes(likes + 1);\r\n            setUserLike(true);\r\n         }\r\n         \r\n      }\r\n   }\r\n   const display = action.type === 'like' ? `${likes} ${action.display}` : actionDisplay\r\n   return <button onClick={handleClick} className={className}> {display} </button>\r\n }\r\n \r\n export function Tweet(props) {\r\n   const { tweet } = props;\r\n   const className = props.className ? props.className : 'col-10 mx-auto col-md-6';\r\n   return <div className={className}>\r\n     <p>{tweet.id} - {tweet.content}</p>\r\n     <div className=\"btn btn-group\">\r\n       <ActionBtn tweet={tweet} action={{type: 'like', display: 'Likes'}} />\r\n       <ActionBtn tweet={tweet} action={{type: 'unlike', display: 'Unlike'}} />\r\n       <ActionBtn tweet={tweet} action={{type: 'retweet', display: 'Retweet'}} />\r\n     </div>\r\n   </div>\r\n }","export function loadTweets (callback) {\r\n   const xhr = new XMLHttpRequest();\r\n   const method = 'GET';\r\n   const url = process.env.REACT_APP_SERVER_URL;\r\n   const responseType = 'json';\r\n \r\n   xhr.responseType = responseType;\r\n   xhr.open(method, url);\r\n \r\n   xhr.onload = () => {\r\n     callback(xhr.response, xhr.status);\r\n   };\r\n   xhr.onerror = () => {\r\n     callback({'message': 'The request was an error'}, 400);\r\n   };\r\n   xhr.send();\r\n }","import React from 'react';\nimport logo from './logo.svg';\n\nimport { TweetsComponent } from './tweets'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <div>\n          <TweetsComponent />\n        </div>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { TweetsComponent } from './tweets'\nimport * as serviceWorker from './serviceWorker';\n\nconst appEl = document.getElementById('root');\nif(appEl) {\n  ReactDOM.render(<App />, appEl);\n}\n\nconst tweetsEl = document.getElementById('twittexample');\nif(tweetsEl) {\n  ReactDOM.render(<TweetsComponent />, tweetsEl);\n}\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}