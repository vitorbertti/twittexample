{"version":3,"sources":["logo.svg","lookup/components.js","tweets/buttons.js","tweets/lookup.js","tweets/detail.js","tweets/list.js","tweets/create.js","tweets/components.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","backendLookup","method","endpoint","callback","data","jsonData","JSON","stringify","url","process","xhr","XMLHttpRequest","csrftoken","name","cookieValue","document","cookie","cookies","split","i","length","trim","substring","decodeURIComponent","getCookie","open","responseType","setRequestHeader","onload","status","response","detail","window","location","href","onerror","send","ActionBtn","props","tweet","action","didPerformAction","likes","className","actionDisplay","display","handleActionBackendEvent","type","onClick","e","preventDefault","tweetId","id","apiTweetAction","ParentTweet","parent","Tweet","hideActions","didRetweet","useState","actionTweet","setActionTweet","match","pathname","urlTweetId","groups","tweetid","isDetail","handlePerformAction","newActionTweet","content","Fragment","event","TweetsList","tweetsInit","setTweetsInit","tweets","setTweets","tweetsDidSet","setTweetsDidSet","useEffect","final","newTweets","concat","username","apiTweetList","alert","handleDidRetweet","newTweet","updateTweetsInit","unshift","updateFinalTweets","map","item","index","key","TweetCreate","textAreaRef","React","createRef","didTweet","handleBackendUpdate","console","log","onSubmit","newVal","current","value","ref","required","TweetsComponent","setNewTweets","canTweet","tempNewTweets","TweetDetailComponent","didLookup","setDidLookup","setTweet","handleBackendLookup","apiTweetDetail","App","src","logo","alt","target","rel","Boolean","hostname","appEl","getElementById","ReactDOM","render","element","createElement","tweetsEl","dataset","querySelectorAll","forEach","container","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.65746a7a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","function getCookie(name) {\r\n  var cookieValue = null;\r\n  if (document.cookie && document.cookie !== '') {\r\n      var cookies = document.cookie.split(';');\r\n      for (var i = 0; i < cookies.length; i++) {\r\n          var cookie = cookies[i].trim();\r\n          // Does this cookie string begin with the name we want?\r\n          if (cookie.substring(0, name.length + 1) === (name + '=')) {\r\n              cookieValue = decodeURIComponent(cookie.substring(name.length + 1));\r\n              break;\r\n          }\r\n      }\r\n  }\r\n  return cookieValue;\r\n }\r\n\r\nexport function backendLookup(method, endpoint, callback, data) {\r\n  let jsonData;\r\n  if(data) {\r\n    jsonData = JSON.stringify(data);\r\n  }\r\n  const url = `${process.env.REACT_APP_SERVER_URL}${endpoint}` ;\r\n  const xhr = new XMLHttpRequest();\r\n  \r\n  const csrftoken = getCookie('csrftoken');\r\n  xhr.open(method, url);\r\n  xhr.responseType = 'json';\r\n  xhr.setRequestHeader('Content-Type', 'application/json');\r\n  \r\n  if(csrftoken) {\r\n    // xhr.setRequestHeader(\"HTTP_X_REQUESTED_WITH\", \"XMLHttpRequest\")\r\n    xhr.setRequestHeader(\"X-Requested-With\", \"XMLHttpRequest\")\r\n    xhr.setRequestHeader(\"X-CSRFToken\", csrftoken)\r\n  }\r\n   xhr.onload = () => {\r\n    if (xhr.status === 403) {\r\n      const detail = xhr.response.detail\r\n      if (detail === \"Authentication credentials were not provided.\"){\r\n        window.location.href = \"/login?showLoginRequired=true\"\r\n      }\r\n    }\r\n     callback(xhr.response, xhr.status);\r\n   };\r\n   xhr.onerror = () => {\r\n     callback({'message': 'The request was an error'}, 400);\r\n   };\r\n   xhr.send(jsonData);\r\n}\r\n\r\n","import React from 'react'\r\n\r\nimport {apiTweetAction} from './lookup'\r\n\r\nexport function ActionBtn(props) {\r\n   const {tweet, action, didPerformAction} = props;\r\n   const likes = tweet.likes ? tweet.likes : 0;\r\n   const className = props.className ? props.className : 'btn btn-primary btn-sm';\r\n   const actionDisplay = action.display ? action.display : 'Action';\r\n\r\n   const handleActionBackendEvent = (response, status) =>{\r\n      if ((status === 200 || status === 201) && didPerformAction){\r\n         didPerformAction(response, status);\r\n      }\r\n    }\r\n\r\n   const handleClick = (e) => {\r\n      e.preventDefault();\r\n      apiTweetAction(tweet.id, action.type, handleActionBackendEvent)\r\n   }\r\n\r\n   const display = action.type === 'like' ? `${likes} ${action.display}` : actionDisplay\r\n   return <button onClick={handleClick} className={className}> {display} </button>\r\n }","import { backendLookup } from '../lookup'\r\n\r\nexport function apiTweetCreate(newTweet, callback) {\r\n   backendLookup('POST', '/tweets/create/', callback, { content: newTweet });\r\n}\r\n\r\nexport function apiTweetDetail(tweetId, callback) {\r\n   backendLookup(\"GET\", `/tweets/${tweetId}/`, callback)\r\n}\r\n\r\nexport function apiTweetList(username, callback) {\r\n   let endpoint =  \"/tweets/\"\r\n   if (username){\r\n       endpoint =  `/tweets/?username=${username}`\r\n   }\r\n   backendLookup(\"GET\", endpoint, callback)\r\n}\r\n\r\nexport function apiTweetAction(tweetId, action, callback){\r\n   const data = { id: tweetId, action: action }\r\n   backendLookup(\"POST\", \"/tweets/action/\", callback, data)\r\n}","import React, { useState } from 'react'\r\n\r\nimport { ActionBtn } from './buttons';\r\n\r\nexport function ParentTweet(props){\r\n   const {tweet} = props\r\n   return tweet.parent ? <div className='row'>\r\n   <div className='col-11 mx-auto p-3 border rounded'>\r\n     <p className='mb-0 text-muted small'>Retweet</p>\r\n     <Tweet hideActions className={' '} tweet={tweet.parent} />\r\n   </div>\r\n   </div> : null\r\n }\r\n \r\n export function Tweet(props) {\r\n   const { tweet, didRetweet, hideActions } = props;\r\n   const [actionTweet, setActionTweet] = useState(props.tweet ? props.tweet : null);\r\n   const className = props.className ? props.className : 'col-10 mx-auto col-md-6';\r\n   const path = window.location.pathname;\r\n   const match = path.match(/(?<tweetid>\\d+)/);\r\n   const urlTweetId = match ? match.groups.tweetid : -1;\r\n   const isDetail = `${tweet.id}` === `${urlTweetId}`;\r\n\r\n   const handleLink = (event) => {\r\n      event.preventDefault();\r\n      window.location.href = `/${tweet.id}`;\r\n    }\r\n\r\n   const handlePerformAction = (newActionTweet, status) => {\r\n      if (status === 200){\r\n        setActionTweet(newActionTweet)\r\n      } else if (status === 201) {\r\n         if (didRetweet){\r\n            didRetweet(newActionTweet)\r\n          }\r\n      }\r\n    }\r\n\r\n   return (\r\n      <div className={className}>\r\n         <div>\r\n            <p>{tweet.id} - {tweet.content}</p>\r\n            <ParentTweet tweet={tweet} />\r\n         </div>\r\n         <div className='btn btn-group'></div>\r\n         {(actionTweet && hideActions !== true) && <React.Fragment>\r\n            <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction} action={{type: \"like\", display:\"Likes\"}}/>\r\n            <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction} action={{type: \"unlike\", display:\"Unlike\"}}/>\r\n            <ActionBtn tweet={actionTweet} didPerformAction={handlePerformAction} action={{type: \"retweet\", display:\"Retweet\"}}/>\r\n         </React.Fragment>\r\n         }\r\n         {isDetail === true ? null : <button className='btn btn-outline-primary btn-sm' onClick={handleLink}>View</button>}\r\n      </div>\r\n   )\r\n }","import React, { useEffect, useState } from 'react'\r\n\r\nimport { apiTweetList } from './lookup';\r\nimport { Tweet } from './detail'\r\n\r\n\r\nexport function TweetsList(props) {\r\n   const [tweetsInit, setTweetsInit] = useState([]);\r\n   const [tweets, setTweets] = useState([]);\r\n   const [tweetsDidSet, setTweetsDidSet] = useState(false);\r\n   useEffect(() => {\r\n      const final = [...props.newTweets].concat(tweetsInit);\r\n      if(final.length !== tweets.length) {\r\n         setTweets(final);\r\n      }\r\n   }, [props.newTweets, tweets, tweetsInit]);\r\n\r\n   useEffect(() => {\r\n      if(tweetsDidSet === false) {\r\n         const handleTweetListLookup = (response, status) => {\r\n           if(status === 200) {\r\n             setTweetsInit(response);\r\n             setTweetsDidSet(true);\r\n           }else {\r\n             alert('There was an error.');\r\n           }\r\n         };\r\n         apiTweetList(props.username, handleTweetListLookup);\r\n      }\r\n   }, [tweetsInit, tweetsDidSet, setTweetsDidSet, props.username]);\r\n\r\n   const handleDidRetweet = (newTweet) => {\r\n      const updateTweetsInit = [...tweetsInit]\r\n      updateTweetsInit.unshift(newTweet)\r\n      setTweetsInit(updateTweetsInit)\r\n      const updateFinalTweets = [...tweets]\r\n      updateFinalTweets.unshift(tweets)\r\n      setTweets(updateFinalTweets)\r\n    }\r\n \r\n   return tweets.map((item, index) => {\r\n     return <Tweet tweet={item} key={`${index}-{item.id}`} className='my-5 py-5 border bg-white text-dark' didRetweet={handleDidRetweet}/>\r\n   })\r\n }","import React from 'react'\r\n\r\nimport { apiTweetCreate } from './lookup';\r\n\r\nexport function TweetCreate(props) {\r\n   const textAreaRef = React.createRef()\r\n   const {didTweet} = props\r\n    const handleBackendUpdate = (response, status) =>{\r\n      if (status === 201){\r\n        didTweet(response)\r\n      } else {\r\n        console.log(response)\r\n        alert(\"An error occured please try again\")\r\n      }\r\n    }\r\n\r\n    const handleSubmit = (event) => {\r\n      event.preventDefault()\r\n      const newVal = textAreaRef.current.value\r\n      apiTweetCreate(newVal, handleBackendUpdate)\r\n      textAreaRef.current.value = ''\r\n    }\r\n    return <div className={props.className}>\r\n          <form onSubmit={handleSubmit}>\r\n            <textarea ref={textAreaRef} required={true} className='form-control' name='tweet'></textarea>\r\n            <button type='submit' className='btn btn-primary my-3'>Tweet</button>\r\n        </form>\r\n  </div>\r\n}","import React, { useEffect, useState } from 'react'\r\n\r\nimport { TweetsList } from './list';\r\nimport { TweetCreate } from './create';\r\nimport {Tweet} from './detail';\r\nimport {apiTweetDetail} from './lookup';\r\n\r\nexport function TweetsComponent(props) {\r\n   const [newTweets, setNewTweets] = useState([]);\r\n   const canTweet = props.canTweet === \"false\" ? false : true;\r\n\r\n   const handleNewTweet = (newTweet) => {\r\n      let tempNewTweets = [...newTweets];\r\n      tempNewTweets.unshift(newTweet);\r\n      setNewTweets(tempNewTweets);\r\n   };\r\n\r\n   return (\r\n      <div className={props.className}>\r\n         {canTweet === true && <TweetCreate didTweet={handleNewTweet} className='col-12 mb-3' />}\r\n         <TweetsList newTweets={newTweets} {...props}/>\r\n      </div>\r\n   );\r\n}\r\n\r\nexport function TweetDetailComponent(props){\r\n   const {tweetId} = props;\r\n   const [didLookup, setDidLookup] = useState(false);\r\n   const [tweet, setTweet] = useState(null);\r\n \r\n   const handleBackendLookup = (response, status) => {\r\n     if (status === 200) {\r\n       setTweet(response);\r\n     } else {\r\n       alert(\"There was an error finding your tweet.\");\r\n     }\r\n   }\r\n   useEffect(()=>{\r\n     if (didLookup === false){\r\n \r\n       apiTweetDetail(tweetId, handleBackendLookup);\r\n       setDidLookup(true);\r\n     }\r\n   }, [tweetId, didLookup, setDidLookup]);\r\n \r\n   return tweet === null ? null : <Tweet tweet={tweet} className={props.className} />\r\n  } \r\n","import React from 'react';\nimport logo from './logo.svg';\n\nimport { TweetsComponent } from './tweets'\nimport './App.css';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\n        <p>\n          Edit <code>src/App.js</code> and save to reload.\n        </p>\n        <div>\n          <TweetsComponent />\n        </div>\n        <a\n          className=\"App-link\"\n          href=\"https://reactjs.org\"\n          target=\"_blank\"\n          rel=\"noopener noreferrer\"\n        >\n          Learn React\n        </a>\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { TweetsComponent, TweetDetailComponent } from './tweets'\nimport * as serviceWorker from './serviceWorker';\n\nconst appEl = document.getElementById('root');\nif(appEl) {\n  ReactDOM.render(<App />, appEl);\n}\n\nconst element = React.createElement;\nconst tweetsEl = document.getElementById('twittexample');\nif(tweetsEl) {\n  ReactDOM.render(element(TweetsComponent, tweetsEl.dataset), tweetsEl);\n}\n\nconst tweetDetailElements = document.querySelectorAll(\".twittexample-detail\")\n\ntweetDetailElements.forEach(container=> {\n    ReactDOM.render(\n      element(TweetDetailComponent, container.dataset), \n        container);\n})\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}